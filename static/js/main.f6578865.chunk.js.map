{"version":3,"sources":["hooks/useAPICall.js","Contexts/SearchContext.js","Components/Login.js","Components/UploadImage.js","Components/LoadingPlaylist.js","Components/SearchPlaylist.js","Components/SearchObjectCard.js","Components/LoadMosaic.js","Components/Info.js","App.js","serviceWorker.js","index.js","api/index.js"],"names":["memoizedStorage","errorData","loading","errorReq","result","loaded","useAPICall","memoize","params","useState","data","setData","useEffect","source","CancelToken","promise","apiCall","get","urlParams","cancelToken","token","then","res","catch","e","isCancel","cancel","initialState","pictureId","pictureMosaic","firstLogin","playlist","playlistSearch","playlistId","pictureName","picture","type","selectedPlaylist","page","code","Bearer","RefreshToken","playlistInfo","trueColor","expires_at","tiles","initialResultsState","results","initialURL","url","process","SearchContext","React","createContext","Login","setSearchState","redirect","console","log","APIVAL","qs","stringify","client_id","client_secret","response_type","redirect_uri","scope","URL","Link","href","Button","variant","style","backgroundColor","minWidth","minHeight","useStyles","makeStyles","theme","backdrop","zIndex","drawer","color","UploadImage","classes","setLoading","error","setError","Fragment","accept","display","id","onChange","exifFile","EXIF","getData","target","files","exifData","pretty","this","getBase64Strings","maxSize","uuidv4","file","Promise","resolve","reject","reader","FileReader","onload","event","onerror","err","readAsDataURL","readFileDataAsBase64","htmlFor","component","Backdrop","className","open","CircularProgress","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","action","IconButton","size","aria-label","onClick","fontSize","Alert","severity","card","maxWidth","margin","spacing","media","height","CardLoad","Card","CardHeader","title","Skeleton","animation","width","marginBottom","subheader","CardContent","LoadingPlaylist","Grid","container","direction","justify","alignItems","Array","map","key","ind","item","xs","md","lg","SearchPlaylist","inputValue","setInputValue","Input","value","placeholder","onKeyDown","ValueLabelComponent","props","children","Tooltip","enterTouchDelay","placement","Options","playlistSearchNeeded","setSliderCurrent","InputLabel","Slider","min","max","v","onChangeCommitted","defaultValue","Divider","CardActions","Typography","Switch","checked","SearchObjectCard","src","disabled","loadMedia","CardMedia","image","loadCard","LoadMosaic","bearer","newPhoto","setNewPhoto","APIVal","axios","method","headers","MosaicCard","fileName","external_urls","spotify","name","a","document","createElement","download","click","padding","root","flexGrow","transform","modal","justifyContent","paper","palette","background","Info","setOpen","Dialog","scroll","aria-labelledby","DialogTitle","DialogContent","DialogContentText","dividers","orientation","flexItem","rel","DialogActions","PlaylistSearch","lazy","App","useContext","searchState","updateState","resultState","setResultsState","CssBaseline","_","isEqual","maxHeight","noWrap","fallback","query","Boolean","window","location","hostname","match","require","config","history","createBrowserHistory","basename","ReactDOM","render","setURL","urlHead","curResState","newState","push","state","interval","setInterval","secondsNow","Date","getTime","getTokenFetch","grant_type","refresh_token","access_token","clearInterval","search","replace","path","pathname","hash","newBearer","parse","getTokens","seconds","body","fetch","json","workerState","stateFromURL","fixPath","newURL","Provider","getElementById","navigator","serviceWorker","ready","registration","unregister","message","create","baseURL","fetchSpotifyAPI","context","URLAPI","susepnsify","status","suspender","response","read"],"mappings":"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","file":"static/js/main.f6578865.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport {CancelToken, isCancel} from 'axios';\nimport {apiCall} from \"../api\";\nimport qs from 'qs';\n\n\n\nconst memoizedStorage = {};\n\n\nconst errorData = {\n    loading: false,\n    errorReq: true,\n    result: null,\n    loaded:false\n};\n\n\n\n\nconst useAPICall = ({memoize = false, params}) => {\n\n    const [data, setData] = useState(null)\n\n\n    useEffect(() => {\n\n        let urlParams;\n\n        const source = CancelToken.source();\n\n        const promise = apiCall\n            .get(urlParams, {\n                cancelToken : source.token,\n            })\n            .then(res => {\n                setData(res.data)\n            })\n            .catch(e => {\n                if (!isCancel(e)){\n                    setData(errorData)\n                }\n                if (isCancel(e)) return\n                throw e;\n            })\n\n        if (memoize) memoizedStorage[urlParams] = promise\n\n        return () => {\n            source.cancel()\n        }\n\n\n    },[params])\n\n    return {\n        data,\n        loading: data === null\n    }\n}\n\n\nexport default useAPICall;","import React, {useContext, useEffect, useState} from 'react';\nimport qs from 'qs';\nimport useAPICall from '../hooks/useAPICall'\nimport _ from 'lodash'\nimport {useLocalStorage} from \"@greysonevins/use-local-storage\";\n\n\nconst URLServer = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'greyson.pythonanywhere.com'\n\n\nconst initialState = {\n    pictureId: null,\n    pictureMosaic: null,\n    firstLogin: true,\n    playlist: null,\n    playlistSearch: 'Your Top 2019 Songs',\n    playlistId: null,\n    pictureName: null,\n    picture: null,\n    type: 'playlist',\n    selectedPlaylist: null,\n    page: 0,\n    code: null,\n    Bearer: null,\n    RefreshToken: null,\n    playlistInfo: null,\n    trueColor: true,\n    expires_at: null,\n    tiles: 25\n}\n\nconst initialResultsState = {\n    results: null,\n    loading: false,\n}\n\n\nconst initialURL = {url: process.env.REACT_APP_API_URL_PROD}\n\n\nconst SearchContext = React.createContext(initialState)\n\n\nconst SearchProvider = (props) => {\n    const {history} = props.children.props\n    const [searchState, setSearchState] = useState(initialState)\n\n    const [resultState, setResultsState] = useState(initialResultsState)\n    const [url, setURL] = useState(initialURL)\n\n    const urlHead = '/spotify-mosaic'\n\n    const {data, loading} = useAPICall({memoize: true, params: searchState})\n\n\n    useEffect(() => {\n        if (loading) {\n            setResultsState(curResState => ({...curResState, loading}))\n        } else if (!!data) {\n            setResultsState(curResState => ({...curResState, ...data, loading, errorReq: false}))\n        }\n\n    }, [data, loading])\n\n\n    const fixPath = (path) => {\n        let stateFromURL = qs.parse(path)\n        stateFromURL.playlist = !!stateFromURL.playlist ? stateFromURL.playlist : initialState.playlist\n        stateFromURL.playlistSearch = !!stateFromURL.playlistSearch ? stateFromURL.playlistSearch : initialState.playlistSearch\n        stateFromURL.playlistId = !!stateFromURL.playlistId ? stateFromURL.playlistId : initialState.playlistId\n        stateFromURL.pictureName = !!stateFromURL.pictureName ? stateFromURL.pictureName : initialState.pictureName\n        stateFromURL.picture = !!stateFromURL.picture ? stateFromURL.picture : initialState.picture\n        stateFromURL.type = !!stateFromURL.type ? stateFromURL.type : initialState.type\n        stateFromURL.selectedPlaylist = !!stateFromURL.selectedPlaylist ? stateFromURL.selectedPlaylist : initialState.selectedPlaylist\n\n\n        const newState = {...searchState, ...stateFromURL}\n        return newState\n    }\n\n    const updateState = (newState) => {\n        if (!newState) {\n            setSearchState({...initialState})\n            history.push('/login')\n        }\n        setSearchState(state => ({...state, ...newState}))\n        if (_.isEqual(newState, initialState)) {\n            history.push('/login')\n        }\n    }\n\n\n    // const [seconds, setSeconds] = useState(0);\n\n    useEffect(() => {\n        let interval = null;\n        if (!!searchState.expires_at) {\n            interval = setInterval(() => {\n                // console.log(\"Running\")\n                const secondsNow = new Date().getTime() / 1000\n                if (searchState.expires_at <= secondsNow) {\n\n                    try {\n                        const expires_at = new Date().getTime() / 1000 + 3000\n                        console.log(\"Changed\")\n                        getTokenFetch({\n                            grant_type: \"refresh_token\",\n                            refresh_token: searchState.RefreshToken\n                        }).then(res =>\n                            updateState({...searchState, Bearer: res.access_token, expires_at: expires_at})\n                        ).catch(e => setSearchState({...initialState}))\n                    } catch (e) {\n                        setSearchState({...initialState})\n                    }\n\n                }\n\n            }, 1000);\n        } else if (!searchState.expires_at) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [searchState.expires_at]);\n\n\n    useEffect(() => {\n        let search = history.location.search.replace(\"?\", \"\")\n        const path = history.location.pathname\n        console.log(history.location)\n\n        if ((path === '/spotify-mosaic/' || path === '/spotify-mosaic') && (!history.location.hash)) {\n            setSearchState({...initialState})\n            history.push(`/login`)\n\n        } else if (!searchState.Bearer && !search) {\n\n            setSearchState({...initialState})\n            history.push(`/login`)\n\n        } else if ((history.location.pathname === '/login' || history.location.hash === '#%2Flogin') && !!search) {\n            const newBearer = qs.parse(search)\n            console.log(newBearer)\n            const code = newBearer.code\n\n            const getTokens = getTokenFetch({code: code, grant_type: 'authorization_code'})\n            const seconds = (new Date().getTime() / 1000) + 3000\n\n            getTokens.then(res => updateState({\n                ...searchState,\n                code,\n                Bearer: res.access_token,\n                expires_at: seconds,\n                RefreshToken: res.refresh_token\n            }))\n            history.push(`/upload`)\n\n        } else if (history.location.pathname === '/search' && !!searchState.playlist) {\n            updateState({...searchState, playlist: null, playlistInfo: null})\n        } else if (!search && !search.picture) {\n            history.push(`/upload`)\n\n        } else if (!search && search.picture) {\n            history.push(`/createmosaic`)\n\n        } else {\n            setSearchState({...initialState})\n            history.push(`/login`)\n\n        }\n\n    }, [])\n\n\n    const getTokenFetch = (body) => {\n        const data = {\n            ...body,\n            redirect_uri: `${process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : process.env.REACT_APP_API_URL_PROD}/login`,\n            client_id: process.env.REACT_APP_SPOTIFY_CLIENT_ID,\n            client_secret: process.env.REACT_APP_SPOTIFY_SECRET\n        }\n        const APIVAL = qs.stringify(data)\n\n        const URL = `https://accounts.spotify.com/api/token`\n        return fetch(URL, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/json'\n\n            },\n            body: APIVAL\n        }).then(res => {\n\n                return res.json()\n            }\n        )\n    }\n\n\n    useEffect(() => {\n        let search = history.location.search.replace(\"?\", \"\")\n        let path = history.location.pathname\n        console.log(searchState)\n        const workerState = fixPath(search)\n        if (!_.isEqual(workerState, searchState)) {\n            if ((path === '/spotify-mosaic/' || path === '/spotify-mosaic') && (!history.path.hash)) {\n                setURL({url: `${urlHead}/login`})\n                history.push(`/login`)\n            } else if (!searchState.Bearer) {\n                setURL({url: `${urlHead}/login`})\n                history.push(`/login`)\n            } else if (!searchState.picture) {\n                setURL({url: `${urlHead}/upload`})\n                history.push(`/upload`)\n            } else if (!searchState.playlist) {\n                setURL({url: `/search`})\n                history.push(`/search`)\n\n            } else if (!!searchState.playlist && !!searchState.picture && !!searchState.Bearer) {\n                setURL({url: `/createmosaic`})\n                history.push(`/createmosaic`)\n            } else {\n\n                const urlParams = qs.stringify(searchState)\n                const newURL = `?${urlParams}`\n                setURL({url: newURL})\n                history.push(newURL)\n            }\n        }\n    }, [searchState.playlist, searchState.picture, searchState.Bearer])\n\n    return (\n        <SearchContext.Provider\n            value={{searchState, updateState, resultState, setResultsState, url}}\n        >\n            {props.children}\n\n        </SearchContext.Provider>\n    );\n\n}\n\nexport {SearchProvider, SearchContext}\n\nexport const useSearchContext = () => useContext(SearchContext);","import React, {useState, useEffect} from 'react';\nimport {Link, Button} from \"@material-ui/core\";\nimport {fetchSpotifyAPI, susepnsify} from \"../api\";\nimport qs from 'qs';\n\n\nconst urlHead = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' :  process.env.REACT_APP_API_URL_PROD\n\nexport default function Login({setSearchState}) {\n    const redirect= `${urlHead}/login`\n    console.log(redirect)\n    const APIVAL = qs.stringify({client_id: process.env.REACT_APP_SPOTIFY_CLIENT_ID, client_secret:process.env.REACT_APP_SPOTIFY_SECRET, response_type:'code', redirect_uri: redirect, scope:'user-read-private user-read-email'})\n    const URL = `https://accounts.spotify.com/authorize?${APIVAL}`\n    // const loginSuspense =\n    // let data = loginSuspense.read()\n    // console.log(data)\n\n\n    return (\n       <Link href={URL}><Button  variant={'contained'} style={{backgroundColor:'#1ed761', minWidth: '100%', minHeight: '5vh'}}>Login</Button></Link>\n    )\n\n}","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {Backdrop, Button, CircularProgress, Snackbar} from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Info';\nimport IconButton from '@material-ui/core/IconButton';\nimport Alert from '@material-ui/lab/Alert';\nimport { v4 as uuidv4 } from 'uuid';\nimport EXIF from 'exif-js';\nimport { getBase64Strings } from 'exif-rotate-js/lib';\n\nconst URLAPI = process.env.NODE_ENV === 'development' ? process.env.REACT_APP_API_URL_DEV : 'https://greyson.pythonanywhere.com'\n\n\nconst useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nfunction readFileDataAsBase64(e) {\n    const file = e.target.files[0];\n\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            resolve(event.target.result);\n        };\n\n        reader.onerror = (err) => {\n            reject(err);\n        };\n\n        reader.readAsDataURL(file);\n    });\n}\n\nexport default function UploadImage({setSearchState}) {\n    const classes = useStyles();\n\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const onDrop = (picture) => {\n\n        let exifFile = true\n        setLoading(true)\n        EXIF.getData(picture.target.files[0], function() {\n            let exifData = EXIF.pretty(this);\n            if (exifData) {\n                exifFile = true\n\n            } else {\n                exifFile = false\n            }\n        });\n\n\n        if (! exifFile){\n            // console.log(picture.target.files[0])\n            readFileDataAsBase64(picture).then(res => {\n                setSearchState({picture: res, pictureId: uuidv4()})\n                setLoading(false)\n\n                // axios({\n                //     method: \"POST\",\n                //     url: `${URLAPI}/api/image`,\n                //     data: res,\n                //     headers: {\n                //         'Content-Type': 'multipart/form-data; boundary=${form._boundary}'\n                //     }\n                // }).then(res => {\n                //     setSearchState({picture: res.data.image_id})\n                //     setLoading(false)\n                //\n                // }).catch(res => {\n                //     setSearchState({picture: null})\n                //     setLoading(false)\n                //     setError(true)\n                // })\n\n            }).catch(e => {\n                setSearchState({picture: null, pictureId: null})\n                setLoading(false)\n                setError(true)\n            })\n        } else {\n            getBase64Strings(picture.target.files, { maxSize: 2000 }).then(res => {\n                console.log(res)\n                setSearchState({picture: res[0], pictureId: uuidv4()})\n                setLoading(false)\n\n            }).catch(e => {\n                console.log(e)\n                setSearchState({picture: null, pictureId: null})\n                setError(true)\n                setLoading(false)\n            })\n        }\n\n\n        // console.log(data.get('image'))\n\n        // setData(dataForm);\n\n//\n    }\n\n    useEffect(() => {\n        console.log(data)\n        if (!!data) {\n            // readmeStream.on('error', console.log)\n// // const {size} = fs.statSync('test.jpeg')\n\n\n\n        }\n//\n    }, [data])\n\n    return (\n        <React.Fragment>\n            <input\n                accept=\"image/*\"\n                style={{display: 'none'}}\n                id=\"raised-button-file\"\n                type=\"file\"\n                onChange={onDrop}\n            />\n            <label htmlFor=\"raised-button-file\">\n                <Button variant={'contained'} color={'primary'} component=\"span\">\n                    Upload\n                </Button>\n\n            </label>\n            <Backdrop className={classes.backdrop} open={loading}>\n                <CircularProgress color=\"inherit\" />\n            </Backdrop>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                open={error}\n                autoHideDuration={6000}\n                onClose={() => setError(false)}\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setError(false)}>\n                            <CloseIcon fontSize=\"small\" />\n                        </IconButton>\n                    </React.Fragment>\n                }\n            >\n                <Alert onClose={() => setError(false)} severity=\"error\">\n                    Error Uploading Selected Image\n                </Alert>\n            </Snackbar>\n        </React.Fragment>\n\n\n    )\n\n}","import React from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Grid} from \"@material-ui/core\";\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        maxWidth: 345,\n        margin: theme.spacing(2),\n    },\n    media: {\n        height: 190,\n    },\n}));\n\nconst CardLoad = () => {\n    const classes = useStyles();\n\n    return (\n\n        <Card className={classes.card}>\n\n            <CardHeader\n\n                title={\n                    <Skeleton animation=\"wave\" height={10} width=\"80%\" style={{marginBottom: 6}}/>\n\n                }\n                subheader={<Skeleton animation=\"wave\" height={10} width=\"40%\"/>}\n            />\n            <Skeleton animation=\"wave\" variant=\"rect\" className={classes.media}/>\n\n\n            <CardContent>\n                <React.Fragment>\n                    <Skeleton animation=\"wave\" height={10} style={{marginBottom: 6}}/>\n                    <Skeleton animation=\"wave\" height={10} width=\"80%\"/>\n                </React.Fragment>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default function LoadingPlaylist() {\n\n    console.log(\"Called\")\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n            >\n\n\n        {\n            [...Array(20)].map((key,ind) => {\n                return (\n                    <Grid\n                        key={ind}\n                        item\n                        xs={12}\n                        md={4}\n                        lg={4}\n                    >\n                        <CardLoad/>\n                    </Grid>\n                )\n\n            })\n        }\n        </Grid>\n\n    )\n}\n","import React, {useState} from 'react';\nimport {Input} from \"@material-ui/core\";\n\n\nexport default function SearchPlaylist({setSearchState, playlistSearch}) {\n    const [inputValue, setInputValue] =useState('')\n    const searchQuery = (event) => {\n        if (event.key === \"Enter\" && !!event.target.value) {\n            setInputValue('')\n            setSearchState({playlistSearch: event.target.value})\n\n\n        }\n    }\n    return (\n        <Input\n            value={inputValue}\n            placeholder={'Search Playlist'}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={(e) => searchQuery(e)}\n            style={{minWidth: 300}}\n\n        />\n    )\n}","import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport qs from 'qs';\nimport {\n    Backdrop,\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    CardMedia,\n    CircularProgress,\n    Divider,\n    Grid,\n    InputLabel,\n    MenuItem,\n    Select, Snackbar,\n    Slider,\n    Switch,\n    Typography,\n    Tooltip\n} from \"@material-ui/core\";\nimport IconButton from '@material-ui/core/IconButton';\nimport Rotate90DegreesCcwIcon from '@material-ui/icons/Rotate90DegreesCcw';\n\nimport SearchPlaylist from './SearchPlaylist'\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport {apiCall, fetchAPI} from \"../api\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport CloseIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Alert from \"@material-ui/lab/Alert/Alert\";\n\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        maxWidth: 500,\n        minWidth: 350,\n        margin: theme.spacing(2),\n    },\n    media: {\n        height: 300,\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color: '#fff',\n    },\n}));\n\nfunction ValueLabelComponent(props) {\n    const { children, open, value } = props;\n\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\n\nconst Options = ({loading, setSearchState, playlistSearchNeeded=null, playlistSearch, tiles, trueColor})=> {\n    const [sliderCurrent, setSliderCurrent] =useState(tiles)\n\n\n    return (\n        <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            <Grid\n                item\n                xs={12}\n                style={{margin: 20}}\n            >\n\n                {! loading && !! playlistSearchNeeded && (\n                    <SearchPlaylist setSearchState={setSearchState} playlistSearch={playlistSearch}/>\n\n                )}\n            </Grid>\n            <Grid\n                item\n                xs={12}\n                style={{margin: 20}}\n            >\n                <React.Fragment>\n\n                    <InputLabel id=\"demo-simple-select-label\">Number of Tiles : {tiles} </InputLabel>\n\n\n                    <Slider style={{minWidth: 300}} ValueLabelComponent={ValueLabelComponent} min={3} max={100} onChange={(e, v) => setSliderCurrent(v)} onChangeCommitted={(e, v) => setSearchState({tiles:v})} defaultValue={tiles}/>\n\n\n\n                </React.Fragment>\n            </Grid>\n            <Divider style={{minWidth: 300}}  />\n\n            <Grid\n                item\n                xs={12}\n                style={{margin: 20}}\n            >\n                <InputLabel id=\"true-color\">Switch to True Color to keep albums matching original photo\n                    pixel</InputLabel>\n\n                <CardActions>\n\n                    <Typography>True Color: {trueColor ? 'On' : 'Off'}</Typography>\n                    <Switch\n                        checked={trueColor}\n                        onChange={() => setSearchState({trueColor: !trueColor})}\n                        value=\"checkedA\"\n                    />\n                </CardActions>\n            </Grid>\n        </Grid>\n    )\n}\nexport default function SearchObjectCard({picture, src, setSearchState, tiles, playlistSearch, trueColor}) {\n\n    const [loading, setLoading] = useState(false)\n\n    const classes = useStyles();\n\n    // const [error, setError] = useState(false)\n\n    // const rotate = () => {\n    //     const APIVal = 'rotate?' + qs.stringify({picture})\n    //     setLoading(true)\n    //     fetchAPI(APIVal).then(res => {\n    //         setSearchState({picture: res.picture})\n    //         setLoading(false)\n    //     }).catch(e => {\n    //         setLoading(false)\n    //     })\n    //\n    //\n    // }\n\n    return (\n        <React.Fragment>\n            <Card className={classes.card}>\n                <CardHeader\n                    subheader={\n                        !!playlistSearch && (<Typography><b>Current Search:</b> {playlistSearch}</Typography>)\n                    }\n                />\n                <CardActions>\n                    <Button disabled={loading} variant={\"contained\"} color={\"secondary\"} onClick={(e) => setSearchState({picture: null})}>New\n                        Image</Button>\n                </CardActions>\n\n                {loading ?\n                    <Skeleton animation=\"wave\" variant=\"rect\" className={classes.loadMedia}/>\n\n                    :\n                    <CardMedia\n                        className={classes.media}\n                        image={src}\n                        title=\"Your Image\"\n                    />\n                }\n\n                {/*<CardActions>*/}\n                {/*    <IconButton size={'medium'}>*/}\n                {/*        <Rotate90DegreesCcwIcon disabled={loading} size={'medium'} onClick={rotate}/>*/}\n                {/*    </IconButton>*/}\n                {/*</CardActions>*/}\n                <CardContent>\n                   <Options\n                       loading={loading}\n                       setSearchState={setSearchState}\n                       playlistSearchNeeded={true}\n                       playlistSearch={playlistSearch}\n                       tiles={tiles}\n                       trueColor={trueColor}\n                       />\n\n                </CardContent>\n            </Card>\n            <Backdrop className={classes.backdrop} open={loading}>\n                <CircularProgress color=\"inherit\"/>\n            </Backdrop>\n            {/*<Snackbar*/}\n            {/*    anchorOrigin={{*/}\n            {/*        vertical: 'top',*/}\n            {/*        horizontal: 'right',*/}\n            {/*    }}*/}\n            {/*    open={error}*/}\n            {/*    autoHideDuration={6000}*/}\n            {/*    onClose={() => setError(false)}*/}\n            {/*    action={*/}\n            {/*        <React.Fragment>*/}\n            {/*            <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setError(false)}>*/}\n            {/*                <CloseIcon fontSize=\"small\" />*/}\n            {/*            </IconButton>*/}\n            {/*        </React.Fragment>*/}\n            {/*    }*/}\n            {/*>*/}\n            {/*    <Alert onClose={() => setError(false)} severity=\"error\">*/}\n            {/*        Error Rotating Image*/}\n            {/*    </Alert>*/}\n            {/*</Snackbar>*/}\n        </React.Fragment>\n    )\n}\n\nexport {Options}","import React, {useState, useEffect} from 'react';\nimport {susepnsify, apiCall} from \"../api\";\nimport qs from 'qs';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Options} from './SearchObjectCard'\nimport axios from 'axios';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardActionArea,\n    CardMedia,\n    CardHeader,\n    Grid,\n    Link,\n    Typography, Snackbar\n} from \"@material-ui/core\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport Alert from \"@material-ui/lab/Alert/Alert\";\n\nconst URLServer = process.env.NODE_ENV === 'development' ? process.env.REACT_APP_API_URL_DEV : 'https://greyson.pythonanywhere.com'\nconst useStyles = makeStyles(theme => ({\n    card: {\n        minHeight: 500,\n        minWidth: 400,\n        margin: theme.spacing(2),\n    },\n    media: {\n        minHeight: 500,\n        minWidth: 400,\n    },\n    loadCard: {\n        minHeight: 500,\n        minWidth: 400,\n        margin: theme.spacing(2),\n    },\n    loadMedia: {\n        minHeight: 300,\n        minWidth: 300,\n    },\n}));\n\nfunction readFileDataAsBase64(file) {\n\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n\n        reader.onload = (event) => {\n            resolve(event.target.result);\n        };\n\n        reader.onerror = (err) => {\n            reject(err);\n        };\n\n        reader.readAsDataURL(file);\n    });\n}\n\nexport default function LoadMosaic({image, playlist, bearer, setSearchState, tiles, playlistInfo, trueColor, pictureId}) {\n\n    const [error, setError] = useState(false)\n    const [newPhoto, setNewPhoto] = useState(null)\n    const [loading, setLoading] = useState(false)\n    useEffect(() => {\n\n        if (!!image && !!playlist && !!bearer) {\n            setLoading(true)\n            const APIVal = 'createmosaic?' + qs.stringify({playlist, bearer, tiles, trueColor, pictureId})\n\n            axios({\n                method: \"POST\",\n                url: `${URLServer}/api/${APIVal}`,\n                data: image,\n                headers: {\n                    'Content-Type': 'multipart/form-data; boundary=${form._boundary}'\n                }\n            }).then(res => {\n                setSearchState({pictureMosaic: res.data.pictureMosaic})\n                setNewPhoto(res.data.pictureMosaic)\n                setLoading(false)\n                setError(false)\n                // const newBlob = new Blob([res.data], {type : 'image/jpeg'})\n                //\n                // readFileDataAsBase64(newBlob).then(res => {\n                //     console.log(res)\n                //     setNewPhoto(res)\n                //     setLoading(false)\n                //     setError(false)\n                // })\n\n\n                // const file = (new Blob([res.data]))\n                // console.log(file)\n                // readFileDataAsBase64(file).then(res => {\n                //     // setSearchState({pictureMosaic: res})\n                //     setNewPhoto(res)\n                //     setLoading(false)\n                //     setError(false)\n                // })\n                //\n\n\n\n            }).catch(e => {\n                setSearchState({pictureMosaic: null})\n                setLoading(false)\n                setNewPhoto(null)\n                setError(true)\n            })\n\n        } else {\n            setNewPhoto(null)\n        }\n\n    }, [image, playlist, bearer, tiles, trueColor, pictureId])\n\n\n    return (\n        <React.Fragment>\n            {!!newPhoto && ! loading && ! error && (\n                <React.Fragment>\n                    <MosaicCard setSearchState={setSearchState}\n                                src={newPhoto}\n                                playlistInfo={playlistInfo}\n                                fileName={newPhoto}\n                                loading={loading}\n                                tiles={tiles}\n                                trueColor={trueColor}\n                                error={false}\n                    />\n                </React.Fragment>\n\n            )}\n            {! newPhoto && !loading && (\n                <React.Fragment>\n                    <MosaicCard setSearchState={setSearchState}\n                                src={'https://gifimage.net/wp-content/uploads/2018/11/funny-sad-face-gif-3.gif'}\n                                playlistInfo={playlistInfo}\n                                fileName={null}\n                                loading={loading}\n                                tiles={tiles}\n                                trueColor={trueColor}\n                                error={true}\n                    />\n                </React.Fragment>\n\n            )}\n            {!!loading && (\n                <React.Fragment>\n                    <MosaicCard setSearchState={null}\n                                src={null}\n                                playlistInfo={playlistInfo}\n                                fileName={null}\n                                loading={loading}\n                                tiles={null}\n                                trueColor={null}\n                                error={false}\n                    />\n                </React.Fragment>\n\n            )}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                }}\n                open={error}\n                autoHideDuration={6000}\n                onClose={() => setError(false)}\n                action={\n                    <React.Fragment>\n                        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={() => setError(false)}>\n                            <CloseIcon fontSize=\"small\"/>\n                        </IconButton>\n                    </React.Fragment>\n                }\n            >\n                <Alert onClose={() => setError(false)} severity=\"error\">\n                    Error with creating Mosaic, try new settings or start over\n                </Alert>\n            </Snackbar>\n        </React.Fragment>\n\n\n    )\n}\n\n\nexport function MosaicCard({setSearchState, src, playlistInfo, fileName, loading = false, tiles=null, trueColor=null, error=false}) {\n\n    const classes = useStyles()\n\n\n    const download = (src) => {\n        let a = document.createElement(\"a\"); //Create <a>\n        a.href =  src; //Image Base64 Goes here\n        a.download = `mosaic.jpeg`\n        a.click();\n    };\n\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\"\n            style={{margin:10}}\n        >\n\n            <Grid item>\n                <Card className={loading ? classes.loadCard : classes.card}\n                      style={loading ? {} : {minWidth: '50vh', maxWidth: '50vh'}}\n                >\n                    {!loading && !!playlistInfo && !error && (\n                        <CardHeader\n                            subheader={\n                                <React.Fragment>\n\n                                    <Typography>Playlist: <Link\n                                        href={playlistInfo.external_urls.spotify}>{playlistInfo.name}</Link></Typography>\n                                </React.Fragment>\n                            }\n                        />\n                    )}\n                    {loading && (\n                        <CardHeader\n                            subheader={\n                                <React.Fragment>\n\n                                    <Typography>May Take some time to load</Typography>\n                                </React.Fragment>\n                            }\n                        />\n                    )}\n                    {!loading && !! error && (\n                        <CardHeader\n                            subheader={\n                                <React.Fragment>\n\n                                    <Typography>There was an error creating this mosaic, try new settings or a new photo. Let me know. what happened</Typography>\n                                </React.Fragment>\n                            }\n                        />\n                    )}\n                    {!loading && (\n                        <CardActions>\n                            <Button\n                                onClick={() => setSearchState({playlist: null, playlistInfo: null})}>Back</Button>\n                            {!! src & !error && (\n                                <React.Fragment>\n                                    <Button onClick={() => download(src)}>Download</Button>\n                                    <Link href={src} target={'_blank'}>See Image</Link>\n                                </React.Fragment>\n                            )}\n                        </CardActions>\n                    )}\n                    {!loading && (\n                        <Options\n                            loading={loading}\n                            setSearchState={setSearchState}\n                            playlistSearchNeeded={false}\n                            playlistSearch={null}\n                            tiles={tiles}\n                            trueColor={trueColor}\n                        />\n                    )}\n                    {loading ?\n\n                        <Skeleton animation=\"wave\" variant=\"rect\" className={classes.loadMedia}/>\n                        : !! src ?\n                        <Link href={src} target={'_blank'}>\n\n\n                            <CardMedia\n                                className={classes.media}\n                                title=\"Your Image\"\n                                style={{height: 0, padding: '56.25%'}}\n                                image={src}\n                            />\n                        </Link>\n                            : null\n                    }\n\n                </Card>\n            </Grid>\n        </Grid>\n    )\n}","import React, {useState} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InfoIcon from '@material-ui/icons/Info';\nimport IconButton from '@material-ui/core/IconButton';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Divider, Grid, Link, Tooltip} from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: 300,\n        flexGrow: 1,\n        minWidth: 300,\n        transform: 'translateZ(0)',\n        '@media all and (-ms-high-contrast: none)': {\n            display: 'none',\n        },\n    },\n    modal: {\n        display: 'flex',\n        padding: theme.spacing(1),\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function Info({firstLogin}) {\n\n    const classes = useStyles()\n    const [open, setOpen] = useState(firstLogin)\n\n    return (\n\n        <React.Fragment>\n\n            <Tooltip title=\"Get Info On App\">\n\n                <IconButton\n                    size={'medium'}\n                >\n                    <InfoIcon size={'medium'} onClick={() => setOpen(true)}/>\n                </IconButton>\n            </Tooltip>\n\n            <Dialog open={open}\n                    onClose={() => setOpen(false)}\n                    scroll={'paper'}\n                    aria-labelledby={'scroll-dialog-info'}\n            >\n                <DialogTitle>About Spotify Mosiac</DialogTitle>\n                <DialogContent>\n                    <DialogContentText dividers={true}>\n                        <Grid\n                            container\n                            direction=\"row\"\n                            justify=\"space-between\"\n                            alignItems=\"center\">\n\n                            <Grid item={3}>\n                                <b>App by Greyson Nevins-Archer </b>\n                            </Grid>\n                            <Divider orientation=\"vertical\" flexItem/>\n                            <Grid item={3}>\n\n                                <Link href={'https://github.com/greysonevins/spotify-album-mosaic'} target={'_blank'}>Git\n                                    Repo</Link>\n                            </Grid>\n                            <Divider orientation=\"vertical\" flexItem/>\n                            <Grid\n                                item={3}\n                            >\n\n                                <Link href={'mailto:greyson.nevins@gmail.com'} target={'_blank'}\n                                      rel=\"noopener noreferrer\">Email</Link>\n                            </Grid>\n                        </Grid>\n                        <br/>\n                        <p id=\"app-info-description\">\n                            This application uses your photo to create a mosaic from a selected Spotify playlist and\n                            image you provide.\n                            There is no personal information saved for this application. Just spotify authentication is\n                            needed to get the seleced playlist you want.\n                            How it works is by taking your photo and dividing into tile values based on the number of\n                            tiles you want and generates an average color value for that pixel tile.\n                            Then based on that average color it will find the most similar cover photo average color to\n                            replace the image tile with an album cover.\n                            If you use True Color, a random cover album will be chosen and have a filter added to it to\n                            generate a more true color mosaic tile.\n                        </p>\n                        <br/>\n                        <br/>\n\n                        <b>Playlist</b>\n                        <p>\n                            Search for a playlist that you want to create a mosaic from and the application will grab\n                            all cover photos from this playlist to create the mosaic from.\n                            Playlist's with more songs will slow down the application speed but potenitally have more\n                            accurate colors to represent your image.\n                        </p>\n                        <b>Tiles</b>\n                        <p>\n                            You can change the amount of tiles generated to see the mosaic represented in more or less\n                            cover photos.\n                        </p>\n                        <br/>\n                        <b>True Color</b>\n                        <p>\n                            The True Color switch allows you to switch between two features of how the mosaic is created.\n                            Without True Color,\n                            the application generates tiles to match the destination image based on the provided cover\n                            photos from the playlist by finding the most similiar average color\n                            of the tile and the most similar average color of the playlist.\n                            <b>With True Color</b> instead of matching average color values, the tile is created by\n                            adding a filter to a random cover album photo to match the image's average color value for\n                            that pixel.\n                            This feature will alter the album cover photo but perserve the truest color of the original\n                            photo.\n                        </p>\n                        <br/>\n                    </DialogContentText>\n                </DialogContent>\n\n                <DialogActions>\n                    <Button\n                        onClick={() => setOpen(false)}\n                        color={'secondary'}\n                    >\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    )\n\n}","import React, {useState, useEffect, useRef, lazy, Suspense} from 'react';\nimport {Button, Card, CardHeader, CardActions, Grid, CircularProgress, Typography} from \"@material-ui/core\";\nimport './App.css';\nimport {useSearchContext} from \"./Contexts/SearchContext\";\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Login from './Components/Login';\nimport UploadImage from './Components/UploadImage'\nimport LoadingPlaylist from './Components/LoadingPlaylist'\nimport SearchObjectCard from './Components/SearchObjectCard'\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport LoadMosaic from './Components/LoadMosaic'\nimport _ from 'lodash';\nimport Info from './Components/Info'\n\nconst PlaylistSearch = lazy(() => import('./Components/PlaylistSearch'));\n\nconst URL = process.env.NODE_ENV === 'development' ? process.env.REACT_APP_API_URL_DEV : 'https://greyson.pythonanywhere.com'\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        minHeight: 200,\n        minWidth: 200,\n        margin: theme.spacing(2),\n    },\n    media: {\n        height: 300,\n    },\n}));\n\nconst initialState = {\n    pictureMosaic: null,\n    pictureId: null,\n    playlist: null,\n    firstLogin: true,\n    playlistSearch: 'Your Top 2019 Songs',\n    playlistId: null,\n    pictureName: null,\n    picture: null,\n    type: 'playlist',\n    selectedPlaylist: null,\n    page: 0,\n    code: null,\n    Bearer: null,\n    RefreshToken: null,\n    playlistInfo: null,\n    trueColor: true,\n    expires_at: null,\n    tiles: 75\n}\n\nfunction App(props) {\n\n    const classes = useStyles()\n    const {searchState, updateState, resultState, setResultsState, url} = useSearchContext()\n    const setSearchState = updateState\n\n\n    return (\n\n        <React.Fragment>\n            <CssBaseline/>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"space-between\"\n                alignItems=\"flex-start\"\n            >\n                {searchState.code && (\n                    <Grid\n                        item\n                        style={{padding:20}}\n                    >\n\n                        <Button onClick={() => setSearchState(null)}>Logout/Reset</Button>\n                    </Grid>\n\n\n                )}\n\n\n                <Grid\n                    item\n                >\n                    <Info firstLogin={_.isEqual(searchState, initialState)}/>\n\n                </Grid>\n            </Grid>\n\n\n            {!searchState.code && (\n                <Grid\n                    container\n                    spacing={0}\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                    style={{minHeight: '75vh', maxHeight:'100vh'}}\n                >\n\n                    <Grid item>\n                        <Card className={classes.card}\n\n                        >\n                            <CardHeader\n                                title={<Typography noWrap={true}>Login To Spotify to Begin</Typography>}\n                            />\n                            <CardActions>\n                                <Grid\n                                    container\n                                    direction=\"row\"\n                                    justify=\"center\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid\n                                        item\n                                        xs={12}\n                                    >\n                                        <Login setSearchState={setSearchState}/>\n                                    </Grid>\n                                </Grid>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                </Grid>\n\n            )}\n\n            {searchState.Bearer && !searchState.picture && (\n                <Grid\n                    container\n                    spacing={0}\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    justify=\"center\"\n                    style={{minHeight: '75vh', maxHeight:'100vh'}}\n\n                >\n\n                    <Grid item>\n                        <Card\n                            className={classes.card}\n                        >\n\n                            <CardHeader\n                                title={<Typography>Upload Image to be Modified</Typography>}\n                            />\n                            <CardActions>\n                                <Grid\n                                    container\n                                    direction=\"row\"\n                                    justify=\"center\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid\n                                        item\n                                        xs={5}\n                                    >\n                                        <UploadImage setSearchState={setSearchState}/>\n                                    </Grid>\n                                </Grid>\n                            </CardActions>\n\n                        </Card>\n                    </Grid>\n                </Grid>\n\n            )}\n            {searchState.Bearer && searchState.picture && !searchState.playlist && (\n                <React.Fragment>\n                    <Grid\n                        container\n                        spacing={0}\n                        direction=\"column\"\n                        alignItems=\"center\"\n                        justify=\"center\"\n                    >\n\n                        <Grid item xs={12}>\n                            <SearchObjectCard picture={searchState.picture}\n                                              src={searchState.picture}\n                                              setSearchState={setSearchState}\n                                              tiles={searchState.tiles}\n                                              playlistSearch={searchState.playlistSearch}\n                                              trueColor={searchState.trueColor}\n                            />\n                        </Grid>\n                    </Grid>\n                    <Suspense fallback={\n                        <LoadingPlaylist/>\n\n\n                    }>\n\n                        <PlaylistSearch query={searchState.playlistSearch} type={searchState.type}\n                                        Bearer={searchState.Bearer} setSearchState={setSearchState}/>\n                    </Suspense>\n                </React.Fragment>\n            )}\n\n            {!!searchState.Bearer && !!searchState.picture && !!searchState.playlist && (\n                    <LoadMosaic image={searchState.picture}\n                                playlist={searchState.playlist}\n                                bearer={searchState.Bearer}\n                                setSearchState={setSearchState}\n                                tiles={searchState.tiles}\n                                playlistInfo={searchState.playlistInfo}\n                                trueColor={searchState.trueColor}\n                                pictureId={searchState.pictureId}\n                    />\n            )}\n\n\n        </React.Fragment>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createBrowserHistory} from \"history\";\nimport {Router} from 'react-router';\nimport {SearchProvider} from './Contexts/SearchContext';\n\nrequire('dotenv').config()\n\nconst history = createBrowserHistory({ basename: 'spotify-mosaic/#' })\n\n\nReactDOM.render(\n    <SearchProvider>\n        <Router history={history} >\n            <App history={history}/>\n        </Router>\n    </SearchProvider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from 'axios';\n\nconst URL = process.env.NODE_ENV === 'development' ? process.env.REACT_APP_API_URL_DEV : 'https://greyson.pythonanywhere.com'\n\nconst apiCall = axios.create({\n    baseURL: `${URL}/api/`\n});\n\n\nexport function fetchAPI(APIVAL, api = null) {\n\n    const URLAPI = `${URL}/api/${APIVAL}`\n\n\n    return fetch(URLAPI).then(res =>\n        res.json()\n    )\n}\n\nexport function fetchSpotifyAPI(APIVAL, headers={}, context = 'search', url='') {\n\n\n    let URL;\n    if (! url) {\n        URL = 'https://api.spotify.com/v1'\n\n    } else {\n        URL = url\n    }\n\n    const URLAPI = `${URL}/${context}?${APIVAL}`\n    return fetch(URLAPI, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',\n            ...headers\n\n        }\n    }).then(res => {\n            return res.json()\n        }\n    )\n\n}\n\n\nexport function susepnsify(promise) {\n    let status = 'pending';\n    let result;\n\n    let suspender = promise.then(\n        response => {\n            status = \"success\";\n            result = response;\n        },\n        error => {\n            status = \"error\";\n            result = error\n        }\n    );\n    return {\n        read() {\n            if (status === \"pending\") {\n                throw suspender;\n            }\n            if (status === \"error\") {\n                throw result;\n            }\n            if (status === \"success\") {\n                return result;\n            }\n        }\n    };\n}\n\n\nexport {apiCall}"],"sourceRoot":""}