{"version":3,"sources":["Components/Playlist.js","Components/PlaylistSearch.js"],"names":["useStyles","makeStyles","theme","card","width","maxHeight","margin","spacing","media","height","Playlist","setSearchState","data","classes","Card","className","CardHeader","title","Typography","name","subheader","Fragment","owner","display_name","tracks","total","Link","href","external_urls","spotify","target","Tooltip","aria-label","CardActionArea","onClick","playlist","id","playlistInfo","CardMedia","style","paddingTop","marginTop","image","images","length","url","CardActions","Button","variant","PlaylistSearch","query","type","Bearer","useState","lastSearch","setLastSearch","dataResource","setDataRes","page","setPage","lastPage","setLastPage","useEffect","val","qs","stringify","offset","newData","susepnsify","fetchSpotifyAPI","read","console","log","Grid","container","direction","justify","alignItems","padding","playlists","items","map","ind","item","key","xs","md","lg","disabled"],"mappings":"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","file":"static/js/3.38e191b1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {\n    Button,\n    Card,\n    CardMedia,\n    CardActionArea,\n    CardActions,\n    CardHeader,\n    Link,\n    Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport {makeStyles} from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        width: \"100%\",\n        maxHeight: 600,\n        margin: theme.spacing(0),\n    },\n    media: {\n        height: 190,\n    },\n}));\nexport default function Playlist({setSearchState, data}) {\n    const classes = useStyles()\n\n    // console.log(data)\n    return (\n        <Card className={classes.card}>\n            <CardHeader\n                title={<Typography>{data.name}</Typography>}\n                subheader={\n                    <React.Fragment>\n\n                        <Typography>{data.owner.display_name} {data.tracks.total}</Typography>\n                        <Link href={data.external_urls.spotify} target={'_blank'}>Link Here</Link>\n                    </React.Fragment>\n                }\n            />\n\n            <Tooltip title=\"Click to Create Mosaic from this Playlist\" aria-label=\"add\">\n                <React.Fragment>\n                <CardActionArea\n                    onClick={() => setSearchState({playlist: data.id, playlistInfo: data})}\n                >\n\n                    <CardMedia\n                        className={classes.media}\n                        style={{height: 0, paddingTop: '56.25%', marginTop: 20}}\n                        image={!!data.images && data.images.length > 0 ? data.images[0].url : null}\n                    />\n                </CardActionArea>\n                <CardActions>\n                    <Button onClick={() => setSearchState({playlist: data.id, playlistInfo: data})} variant={'outlined'}>Select\n                        Playlist</Button>\n                </CardActions>\n                </React.Fragment>\n            </Tooltip>\n\n        </Card>\n\n    )\n\n}","import React, {useState, useEffect} from 'react';\nimport {fetchSpotifyAPI, susepnsify} from \"../api\";\nimport {Button, Grid} from '@material-ui/core'\nimport qs from 'qs';\nimport Playlist from \"./Playlist\";\n\n\nexport default function PlaylistSearch({query, type, Bearer, setSearchState}) {\n\n\n    const [lastSearch,setLastSearch] = useState('')\n\n    let [dataResource, setDataRes] = useState(null)\n    const [page, setPage] = useState(0)\n    const [lastPage, setLastPage] =useState(0)\n    // const [data, setData] =useState(null)\n\n    // let data;\n\n    useEffect(() => {\n        if (!! query && page !== lastPage){\n            const val = qs.stringify({query, type, offset:page})\n            const newData = susepnsify(fetchSpotifyAPI(val, {'Authorization': `Bearer ${Bearer}`}))\n            setDataRes(newData)\n            setLastPage(page)\n\n        }\n        else if (!! query && query !== lastSearch) {\n            const val = qs.stringify({query, type, offset:page})\n            const newData = susepnsify(fetchSpotifyAPI(val, {'Authorization': `Bearer ${Bearer}`}))\n            setDataRes(newData)\n            setLastSearch(query)\n        } else {\n            setDataRes(null)\n        }\n    }, [query, page])\n\n    let data;\n    if (!! dataResource){\n        data =dataResource.read()\n        console.log(data, \"ran\")\n    }\n\n\n\n\n\n\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={3}\n                style={{padding: 24}}\n            >\n\n            {!! data && !! data.playlists &&  data.playlists.items.length > 0 && (\n\n\n                <React.Fragment>\n                    {data.playlists.items.map((playlist, ind) => (\n                    <Grid\n                        item\n                        key={ind}\n                        xs={12}\n                        md={6}\n                        lg={4}\n                    >\n\n                        <Playlist\n                            key={ind}\n                            setSearchState={setSearchState}\n                            data={playlist}\n                        />\n                    </Grid>\n                    ))}\n\n\n                </React.Fragment>\n\n            )}\n\n            </Grid>\n            {!! data && (\n                <React.Fragment>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n\n                    >\n                    <Button  disabled={page === 0 ? true : false} onClick={() => setPage(page => page -1)}>Last Page</Button>\n                    <Button disabled={((page + 1) * 20) >= data.total ? true : false } onClick={() => setPage(page => page + 1)}>Next Page</Button>\n                    </Grid>\n                </React.Fragment>\n\n            )}\n\n        </React.Fragment>\n\n    )\n\n\n}"],"sourceRoot":""}